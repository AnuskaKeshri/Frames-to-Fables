{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **Deep Learning**\n",
        "In this section We will build a simple multilayer perceptron network(**MLP**) in TensorFlow"
      ],
      "metadata": {
        "id": "iQ5wPjPb57pb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 130,
      "metadata": {
        "id": "EGoZEKIbdXZD"
      },
      "outputs": [],
      "source": [
        "# Lets import the required libraries\n",
        "import numpy as np\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ThuZ51gEdXZF"
      },
      "source": [
        "### **Load Dataset**\n",
        "We will be using MNIST dataset of handwritten digits\n",
        "\n",
        "Just run the cell below to load dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 131,
      "metadata": {
        "id": "Xj3J8Dp-dXZG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "378db0fb-f4dd-4077-c859-06fe3be71740"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No. of training examples =  60000\n",
            "Size of each image in dataset =  (28, 28)\n",
            "No. of test examples =  10000\n",
            "(60000, 28, 28)\n"
          ]
        }
      ],
      "source": [
        "mnist = keras.datasets.mnist\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "print(\"No. of training examples = \",x_train.shape[0])\n",
        "print(\"Size of each image in dataset = \",x_train.shape[1:])\n",
        "print(\"No. of test examples = \",x_test.shape[0])\n",
        "print(x_train.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "id": "XX9xW4ardXZG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "outputId": "0c5c7b5c-441b-4cdc-8feb-a3b1df2deecf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "label: 1       7       4       2       6       "
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 5 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Run this cell to visualize some of the images from dataset\n",
        "\n",
        "n = 5    # = no. of images to visualize\n",
        "\n",
        "index = np.random.choice(x_train.shape[0],5)  # choose random index\n",
        "print(\"label: \",end=\"\")\n",
        "\n",
        "for i,ind in enumerate(index):\n",
        "    plt.subplot(1,n,i+1)\n",
        "    plt.imshow(x_train[ind],cmap=\"gray\")\n",
        "    plt.axis(\"off\")\n",
        "    print(y_train[ind],end=\"       \")\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FQcA9i9YdXZH"
      },
      "source": [
        "#### Preprocess dataset\n",
        "Since we are building a MLP model the input to the model should be a vector rather than a 28 by 28 matrix.\n",
        "\n",
        "So your **First Task** is to flatten the images\n",
        "\n",
        "(Hint: use *reshape()* method of arrays...)\n",
        "\n",
        "Next, create validation dataset out of training dataset.\n",
        "\n",
        "You can use 50K images for training and 10K for validation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "id": "RXnkfE6gdXZI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "135c43ee-c608-4308-8de8-b14a97a676b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 28, 28, 1)\n",
            "(10000, 28, 28, 1)\n"
          ]
        }
      ],
      "source": [
        "# Flatten the images into 1-d vectors\n",
        "\n",
        "x_train_flatten = x_train.reshape(-1, 28, 28, 1)            # flatten the images of training set\n",
        "x_test_flatten = x_test.reshape(-1, 28, 28, 1)           # flatten th eimages of test set\n",
        "print(x_train_flatten.shape)\n",
        "print(x_test_flatten.shape)\n",
        "# Divide the training data into training and validation data....\n",
        "\n",
        "n_validation = 10000                                        # choose number of images to be used for validation\n",
        "\n",
        "x_validation = x_train_flatten[:n_validation]\n",
        "y_validation = y_train[:n_validation]\n",
        "\n",
        "x_train_flatten = x_train_flatten[n_validation:]\n",
        "y_train = y_train[n_validation:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fMGl2aq3dXZJ"
      },
      "source": [
        "### **Build a model**\n",
        "You can choose whatever architechure you want, but ensure that it is **not too deep** as that will take too much time to train and **not too shallow** as that will give very low accuracy."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 134,
      "metadata": {
        "id": "A7yr3nwTdXZK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "e77b8822-4129-4acf-8b3d-f99b665e8716"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Model.summary of <Sequential name=sequential_23, built=True>>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>keras.src.models.model.Model.summary</b><br/>def summary(line_length=None, positions=None, print_fn=None, expand_nested=False, show_trainable=False, layer_range=None)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/keras/src/models/model.py</a>Prints a string summary of the network.\n",
              "\n",
              "Args:\n",
              "    line_length: Total length of printed lines\n",
              "        (e.g. set this to adapt the display to different\n",
              "        terminal window sizes).\n",
              "    positions: Relative or absolute positions of log elements\n",
              "        in each line. If not provided, becomes\n",
              "        `[0.3, 0.6, 0.70, 1.]`. Defaults to `None`.\n",
              "    print_fn: Print function to use. By default, prints to `stdout`.\n",
              "        If `stdout` doesn&#x27;t work in your environment, change to `print`.\n",
              "        It will be called on each line of the summary.\n",
              "        You can set it to a custom function\n",
              "        in order to capture the string summary.\n",
              "    expand_nested: Whether to expand the nested models.\n",
              "        Defaults to `False`.\n",
              "    show_trainable: Whether to show if a layer is trainable.\n",
              "        Defaults to `False`.\n",
              "    layer_range: a list or tuple of 2 strings,\n",
              "        which is the starting layer name and ending layer name\n",
              "        (both inclusive) indicating the range of layers to be printed\n",
              "        in summary. It also accepts regex patterns instead of exact\n",
              "        names. In this case, the start predicate will be\n",
              "        the first element that matches `layer_range[0]`\n",
              "        and the end predicate will be the last element\n",
              "        that matches `layer_range[1]`.\n",
              "        By default `None` considers all layers of the model.\n",
              "\n",
              "Raises:\n",
              "    ValueError: if `summary()` is called before the model is built.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 218);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ],
      "source": [
        "model = keras.models.Sequential([\n",
        "    keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    keras.layers.MaxPooling2D(2, 2),\n",
        "    keras.layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    keras.layers.MaxPooling2D(2,2),\n",
        "    keras.layers.Flatten(),\n",
        "    keras.layers.Dense(128, activation='relu'),\n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "\n",
        "])\n",
        "\n",
        "# Make a graphical representation of the model...\n",
        "keras.utils.plot_model(model,show_shapes=True)\n",
        "model.summary"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7oDNvKB6dXZL"
      },
      "source": [
        "#### Compile and Train\n",
        "Choose an optimizer- method that minimizes loss function\n",
        "\n",
        "**adam** optimizer is one of the popular choices. You should read about these online"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "id": "7DM9i_F5dXZL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "12b1c980-2eae-4f6d-cbaa-ee2f99200fc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m74s\u001b[0m 733ms/step - accuracy: 0.6192 - loss: 7.2608 - val_accuracy: 0.9571 - val_loss: 0.1478\n",
            "Epoch 2/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 701ms/step - accuracy: 0.9640 - loss: 0.1162 - val_accuracy: 0.9716 - val_loss: 0.0950\n",
            "Epoch 3/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 726ms/step - accuracy: 0.9800 - loss: 0.0674 - val_accuracy: 0.9776 - val_loss: 0.0777\n",
            "Epoch 4/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 698ms/step - accuracy: 0.9870 - loss: 0.0428 - val_accuracy: 0.9787 - val_loss: 0.0736\n",
            "Epoch 5/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 703ms/step - accuracy: 0.9899 - loss: 0.0321 - val_accuracy: 0.9837 - val_loss: 0.0651\n",
            "Epoch 6/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m87s\u001b[0m 762ms/step - accuracy: 0.9932 - loss: 0.0239 - val_accuracy: 0.9848 - val_loss: 0.0568\n",
            "Epoch 7/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 729ms/step - accuracy: 0.9957 - loss: 0.0158 - val_accuracy: 0.9841 - val_loss: 0.0572\n",
            "Epoch 8/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 707ms/step - accuracy: 0.9962 - loss: 0.0126 - val_accuracy: 0.9845 - val_loss: 0.0610\n",
            "Epoch 9/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 693ms/step - accuracy: 0.9977 - loss: 0.0091 - val_accuracy: 0.9861 - val_loss: 0.0554\n",
            "Epoch 10/10\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 728ms/step - accuracy: 0.9986 - loss: 0.0062 - val_accuracy: 0.9859 - val_loss: 0.0574\n"
          ]
        }
      ],
      "source": [
        "model.compile(optimizer=\"adam\",loss = \"sparse_categorical_crossentropy\",metrics=[\"accuracy\"])\n",
        "\n",
        "n_epochs = 10            # set number of epochs\n",
        "batch_size = 512            # you can tweak with these parametrs\n",
        "history = model.fit(x_train_flatten, y_train, epochs=10, batch_size=512, validation_data=(x_validation, y_validation))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7QTWTtoVdXZM"
      },
      "source": [
        "### **Evaluate**\n",
        "Evaluate your model on test data.\n",
        "\n",
        "And Show some results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 137,
      "metadata": {
        "id": "bhuBGWg-dXZM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        },
        "outputId": "84ff9f7c-aec4-490d-86f7-3ddd37a60a11"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 - 4s - 13ms/step - accuracy: 0.9864 - loss: 0.0487\n",
            "Loss =  0.04872967302799225\n",
            "Accuracy =  98.64000082015991 %\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "results = model.evaluate(x_test_flatten, y_test, verbose=2)\n",
        "print(\"Loss = \",results[0])\n",
        "print(\"Accuracy = \",results[1]*100,\"%\")\n",
        "\n",
        "# Plot Accuracy...\n",
        "plt.plot(history.history['accuracy'], label=\"Training Accuracy\")\n",
        "plt.plot(history.history['val_accuracy'], label=\"Validation Accuracy\")\n",
        "plt.title(\"Model Accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Similarly write code to plot loss...\n",
        "plt.plot(history.history['loss'], label=\"Training Loss\")\n",
        "plt.plot(history.history['val_loss'], label=\"Validation Loss\")\n",
        "plt.title(\"Model Loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Hjr0CBhdXZN"
      },
      "source": [
        "Lets show our results on images from testing dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 138,
      "metadata": {
        "id": "sEs1cVAHdXZN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 148
        },
        "outputId": "cb74caf6-a6c8-4ddf-e538-8fe27fe974e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "label: \n",
            "0       0       8       1       2       1       8       1       3       8       "
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted value: \n",
            "0      0      8      1      2      1      8      1      3      8      "
          ]
        }
      ],
      "source": [
        "n = 10   # = no. of images to see predictions on\n",
        "\n",
        "index = np.random.choice(len(x_test_flatten), n, replace=False) # choose random index from test data\n",
        "print(\"label: \")\n",
        "\n",
        "for i, ind in enumerate(index):\n",
        "    plt.subplot(1, n, i + 1)\n",
        "    plt.imshow(x_test[ind], cmap='gray')   # fill code to show images from test set\n",
        "    plt.axis(\"off\")\n",
        "    print(y_test[ind], end=\"       \")\n",
        "\n",
        "plt.show()\n",
        "\n",
        "print(\"Predicted value: \")\n",
        "\n",
        "# Now lets print the predictions\n",
        "\n",
        "\n",
        "for i,ind in enumerate(index):\n",
        "    # write code to predict and print digit in image\n",
        "    # Hint: the output of the model is a 10-d vector which gives probabilties\n",
        "    # The digit in the image would be the class for which probability is hghest...\n",
        "    img = x_test_flatten[ind].reshape(1, 28, 28, 1)\n",
        "    probs = model.predict(img, verbose=0)\n",
        "    digit = np.argmax(probs)\n",
        "    print(digit, end=\"      \")"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
    },
    "kernelspec": {
      "display_name": "Python 3.8.10 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}